namespace Atc.Test;

/// <summary>
/// Provides a data source for a data theory, with the data coming from
/// a class implementing IEnumerable&lt;object[]&gt;, combined with auto-generated data
/// specimens generated by AutoFixture and NSubstitute.
/// </summary>
[AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
public sealed class ClassAutoNSubstituteDataAttribute : ClassDataAttribute
{
    public ClassAutoNSubstituteDataAttribute(Type @class)
        : base(@class)
    {
    }

    public override IEnumerable<object[]> GetData(MethodInfo testMethod)
    {
        var parameters = testMethod.GetParameters();
        var frozenValues = parameters
            .Select((p, i) => (Index: i, Parameter: p, p.ParameterType))
            .Where(x => x.Parameter.GetCustomAttribute<FrozenAttribute>() != null)
            .ToArray();
        var injectMethod = typeof(FixtureRegistrar)
            .GetMethod(
                nameof(FixtureRegistrar.Inject),
                BindingFlags.Public | BindingFlags.Static);

        var data = base.GetData(testMethod);
        foreach (var values in data)
        {
            var fixture = FixtureFactory.Create();
            foreach (var frozenValue in frozenValues)
            {
                injectMethod?
                    .MakeGenericMethod(frozenValue.ParameterType)
                    .Invoke(null, [fixture, values[frozenValue.Index]]);
            }

            yield return values
                .Concat(parameters
                    .Skip(values.Length)
                    .Select(p => GetSpecimen(fixture, p)))
                .ToArray();
        }
    }

    private static object GetSpecimen(
        IFixture fixture,
        ParameterInfo parameter)
    {
        var attributes = parameter
            .GetCustomAttributes()
            .OfType<IParameterCustomizationSource>()
            .OrderBy(x => x is FrozenAttribute);

        foreach (var attribute in attributes)
        {
            attribute
                .GetCustomization(parameter)
                .Customize(fixture);
        }

        return new SpecimenContext(fixture)
            .Resolve(parameter);
    }
}