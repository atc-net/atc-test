namespace Atc.Test;

/// <summary>
/// Provides a data source for a data theory, with the data coming from
/// a class implementing IEnumerable&lt;object[]&gt;, combined with auto-generated data
/// specimens generated by AutoFixture and NSubstitute.
/// </summary>
[AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
public sealed class ClassAutoNSubstituteDataAttribute : ClassDataAttribute
{
    public ClassAutoNSubstituteDataAttribute(Type @class)
        : base(@class)
    {
        Class = @class;
    }

    /// <summary>
    /// Gets the class type that provides the enumerable data.
    /// </summary>
    public new Type Class { get; }

    public override async ValueTask<IReadOnlyCollection<ITheoryDataRow>> GetData(
        MethodInfo testMethod,
        DisposalTracker disposalTracker)
    {
        var baseRows = await base.GetData(testMethod, disposalTracker).ConfigureAwait(false);
        var parameters = testMethod.GetParameters();
        var frozenValues = parameters
            .Select((p, i) => (Index: i, Parameter: p, p.ParameterType))
            .Where(x => x.Parameter.GetCustomAttribute<FrozenAttribute>() != null)
            .ToArray();
        var injectMethod = typeof(FixtureRegistrar).GetMethod(
            nameof(FixtureRegistrar.Inject),
            BindingFlags.Public | BindingFlags.Static);

        var augmented = new List<ITheoryDataRow>(baseRows.Count);
        foreach (var row in baseRows)
        {
            var originalData = row.GetData();
            var fixture = FixtureFactory.Create();

            // Inject frozen values if present in source data.
            foreach (var frozenValue in frozenValues)
            {
                if (originalData.Length > frozenValue.Index)
                {
                    injectMethod?
                        .MakeGenericMethod(frozenValue.ParameterType)
                        .Invoke(null, [fixture, originalData[frozenValue.Index]]);
                }
            }

            var extendedData = originalData
                .Concat(parameters
                    .Skip(originalData.Length)
                    .Select(p => GetSpecimen(fixture, p)))
                .ToArray();

            // Preserve metadata from original row where possible.
            augmented.Add(new TheoryDataRow(extendedData)
            {
                Explicit = row.Explicit,
                Label = row.Label,
                Skip = row.Skip,
                TestDisplayName = row.TestDisplayName,
                Timeout = row.Timeout,
                Traits = row.Traits ?? new Dictionary<string, HashSet<string>>(StringComparer.OrdinalIgnoreCase),
            });
        }

        return augmented;
    }

    private static object GetSpecimen(
        IFixture fixture,
        ParameterInfo parameter)
    {
        var attributes = parameter
            .GetCustomAttributes()
            .OfType<IParameterCustomizationSource>()
            .OrderBy(x => x is FrozenAttribute);

        foreach (var attribute in attributes)
        {
            attribute
                .GetCustomization(parameter)
                .Customize(fixture);
        }

        return new SpecimenContext(fixture)
            .Resolve(parameter);
    }
}