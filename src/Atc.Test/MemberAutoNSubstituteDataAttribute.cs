namespace Atc.Test;

/// <summary>
/// Provides a data source for a data theory, with the data coming from
/// one of the following sources and combined with auto-generated data
/// specimens generated by AutoFixture and NSubstitute.
/// <list type="number">
/// <item>A static property</item>
/// <item>A static field</item>
/// <item>A static method (with parameters)</item>
/// </list>
/// The member must return something compatible with
/// IEnumerable&lt;object[]&gt; with the test data.
/// </summary>
[AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
public sealed class MemberAutoNSubstituteDataAttribute : MemberDataAttributeBase
{
    public MemberAutoNSubstituteDataAttribute(string memberName, params object[] parameters)
        : base(memberName, parameters)
    {
    }

    public override async ValueTask<IReadOnlyCollection<ITheoryDataRow>> GetData(
        MethodInfo testMethod,
        DisposalTracker disposalTracker)
    {
        var baseRows = await base.GetData(testMethod, disposalTracker).ConfigureAwait(false);
        var parameters = testMethod.GetParameters();
        var augmented = new List<ITheoryDataRow>(baseRows.Count);

        foreach (var row in baseRows)
        {
            var data = row.GetData();
            var fixture = FixtureFactory.Create();
            var extendedData = data
                .Concat(parameters
                    .Skip(data.Length)
                    .Select(p => GetSpecimen(fixture, p)))
                .ToArray();

            augmented.Add(new TheoryDataRow(extendedData)
            {
                Explicit = row.Explicit,
                Label = row.Label,
                Skip = row.Skip,
                TestDisplayName = row.TestDisplayName,
                Timeout = row.Timeout,
                Traits = row.Traits ?? new Dictionary<string, HashSet<string>>(StringComparer.OrdinalIgnoreCase),
            });
        }

        return augmented;
    }

    private static object GetSpecimen(
        IFixture fixture,
        ParameterInfo parameter)
    {
        var attributes = parameter
            .GetCustomAttributes()
            .OfType<IParameterCustomizationSource>()
            .OrderBy(x => x is FrozenAttribute);

        foreach (var attribute in attributes)
        {
            attribute
                .GetCustomization(parameter)
                .Customize(fixture);
        }

        return new SpecimenContext(fixture)
            .Resolve(parameter);
    }
}